RESPONSIVE exemple
Mobile (jusqu'à 767px) :
flex-direction: column → cards empilées verticalement
align-items: center → cards centrées

Tablette (768px+) :
flex: 1 1 calc(50% - 1.5rem) → 2 cards par ligne
max-width: calc(50% - 1.5rem) → limitation de la largeur

Desktop (1024px+) :
flex: 1 1 calc(50% - 2rem) → 2 cards par ligne avec plus d'espace
justify-content: space-between → répartition équilibrée



FLEX box
Décomposition de flex: 1 1 300px
1. flex-grow: 1 (premier chiffre)

Signification : L'élément peut grandir pour occuper l'espace disponible
Valeur 1 : Si il y a de l'espace libre, cet élément prendra sa part équitable
Valeur 0 : L'élément ne grandit pas au-delà de sa taille de base

2. flex-shrink: 1 (deuxième chiffre)

Signification : L'élément peut rétrécir si l'espace manque
Valeur 1 : L'élément peut rétrécir proportionnellement
Valeur 0 : L'élément ne rétrécit jamais

3. flex-basis: 300px (troisième valeur)

Signification : La taille de base de l'élément avant distribution de l'espace
300px : L'élément commence avec une largeur de 300px
Équivalent à une width initiale

Exemple concret :
css/* Ces deux écritures sont identiques */
flex: 1 1 300px;

/* Équivaut à : */
flex-grow: 1;
flex-shrink: 1;
flex-basis: 300px;
Dans votre cas pratique :
css.card {
    flex: 1 1 300px;
}
Signifie :

Chaque card fait minimum 300px de large
Si il y a de l'espace en plus, les cards grandissent équitablement
Si l'espace manque, les cards rétrécissent proportionnellement
Sur un écran large : les cards s'agrandissent pour remplir l'espace
Sur un écran étroit : les cards rétrécissent mais restent lisibles

C'est pour ça que vos cards s'adaptent automatiquement à la taille de l'écran !RéessayerClaude n'a pas encore la capacité d'exécuter le code qu'il génère.Mflex: 1 1 calc(50% - 2rem) → 2 cards par ligne avec plus d'espaceModifierParfait ! Laissez-moi vous expliquer cette ligne plus en détail :
flex: 1 1 calc(50% - 2rem) décortiqué
1. Pourquoi calc(50% - 2rem) ?
css.card {
    flex: 1 1 calc(50% - 2rem);
}

50% : Chaque card prend la moitié de la largeur du conteneur
- 2rem : On soustrait l'espace du gap entre les cards
calc() : Permet de mélanger unités (% et rem) dans le calcul

2. Exemple visuel :
┌─────────────────────────────────────────────────────┐
│                   CONTENEUR                         │
│  ┌─────────────────────┐  GAP  ┌─────────────────────┐ │
│  │      CARD 1         │ 2rem  │      CARD 2         │ │
│  │   calc(50% - 2rem)  │       │   calc(50% - 2rem)  │ │
│  └─────────────────────┘       └─────────────────────┘ │
└─────────────────────────────────────────────────────┘
3. Comparaison avec les autres approches :
css/* ❌ Sans calc() - débordement possible */
.card { flex: 1 1 50%; }  /* + gap = plus que 100% ! */

/* ✅ Avec calc() - calcul précis */
.card { flex: 1 1 calc(50% - 2rem); }  /* 50% - espace du gap */

/* ✅ Alternative avec margin au lieu de gap */
.card { 
    flex: 1 1 50%; 
    margin: 0 1rem; /* mais alors pas de gap sur flexbox */
}
4. Pourquoi "plus d'espace" sur desktop ?
Dans votre code, j'ai utilisé :

Tablette : calc(50% - 1.5rem) avec gap: 3rem
Desktop : calc(50% - 2rem) avec gap: 4rem

css/* Tablette */
@media (min-width: 768px) {
    main { gap: 3rem; }
    .card { flex: 1 1 calc(50% - 1.5rem); }
}

/* Desktop */
@media (min-width: 1024px) {
    main { gap: 4rem; }  /* ← Plus d'espace entre cards */
    .card { flex: 1 1 calc(50% - 2rem); }
}
Le "plus d'espace" vient du gap: 4rem sur desktop vs gap: 3rem sur tablette !
5. Formule générale :
cssflex-basis: calc(50% - (gap ÷ 2))

Si gap: 4rem → calc(50% - 2rem)
Si gap: 6rem → calc(50% - 3rem)

C'est la formule magique pour avoir exactement 2 éléments par ligne sans débordement ! 🎯